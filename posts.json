{
	"post": [
		{
			"title": "How to unit test Vue components with Cypress",
			"id": "how-to-unit-test-vue-components-with-cypress",
			"tag": [
				"Cypress",
				"Vue.js",
				"Tests"
			],
			"date": "2018-04-25",
			"content": "If you are developing a Vue application generated using Vue CLI 3 then you know there's an option to select Cypress as your e2e testing tool and that works amazing.\n\nSo you start asking yourself why not using it to also write your unit tests and spare the need to have a different dependency just for that. A little search leads you to [cypress-vue-unit-test](https://github.com/bahmutov/cypress-vue-unit-test) and now I'm going to save you an hour of trying to figure out how to make it work, so you can easily mount your Single File Components and test the hell out of them.\n\nFirst of all, Vue CLI 3 uses Webpack 3.x, so to bundle the .vue you will need to install a different version of `@cypress/webpack-preprocessor`;\n\n`npm install --save-dev @cypress/webpack-preprocessor@1`\n\nThen we have to mess with the `/tests/e2e/plugin/index.js` file. I tried importing Vue's webpack config but that was not working, so this is how it turned out:\n\n```javascript\nconst webpack = require('@cypress/webpack-preprocessor');\n\nconst webpackOptions = {\n  module: {\n    rules: [\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n      },\n      /*\n      // In case you need to handle some asset import\n      {\n        test: /\\.(png|jpg|gif)$/,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              limit: 8192,\n            },\n          },\n        ],\n      },\n      */\n    ],\n  },\n};\n\nconst options = {\n  webpackOptions,\n  watchOptions: {},\n};\n\nmodule.exports = (on, config) => {\n  on('file:preprocessor', webpack(options));\n  return Object.assign({}, config, {\n    fixturesFolder: 'tests/e2e/fixtures',\n    integrationFolder: 'tests/e2e/specs',\n    screenshotsFolder: 'tests/e2e/screenshots',\n    videosFolder: 'tests/e2e/videos',\n    supportFile: 'tests/e2e/support/index.js',\n  });\n};\n```\n\nYour test file may look something like this:\n```javascript\nimport YourComponent from '@/src/components/YourComponent.vue';\n\nconst mountVue = require('cypress-vue-unit-test');\n\ndescribe('YourComponent', () => {\n  beforeEach(mountVue(YourComponent));\n\n  it('Renders correctly', () => {\n    cy.contains('h1', 'Cypress is awesome!');\n  });\n});\n```\n\n\nFor more information about writing your tests, read [@bahmutov/cypress-vue-unit-test](https://github.com/bahmutov/cypress-vue-unit-test) 's documentation, it's very easy to follow!\n\nAnd voilá, now you can add Cypress-Vue-Unit-Tester to your resume!\n\nHope it was helpful and if so, please leave a comment and subscribe to my yout.. oh no, wrong website :)"
		},
		{
			"title": "What I want to learn in 2018",
			"id": "what-i-want-to-learn-in-2018",
			"tag": [
				"learning"
			],
			"date": "2018-02-20",
			"content": "I learned SO MUCH in 2017 (I will publish a post about that soon) and this year I decided to take a step back and focus my learning path more on core concepts instead of keeping up to date with the latest tools.\n\nSure learning new tools helps, I'm currently in love with Vue.js and learning it also teaches you a lot if you try to understand how it works under the hood and by getting in touch with \"new\" concepts like *Flow*, for example.\n\nBeing self-taught, sometimes I feel like I miss deeper knowledge of some core concepts and I need to fix that so here is the list of books and courses I decided to finish this year. I'll keep this list updated and I would love to know your suggestions as well.\n\nMy goals for 2018 are to:\n* Take a deep dive into Javascript;\n* Understand Design Patterns better;\n* Learn more about how operating systems work;\n* Learn more about how browsers work / how to enhance performance;\n\nTo achieve those goals I want to:\n\n1 - Read these books:\n* ~~You Don't Know JS - Up & Going\"~~ `done`\n* ~~You Don't Know JS - \"Scope & Closures\"~~  `done`\n* ~~You Don't Know JS - \"this & Object Prototypes\"~~  `done`\n* ~~You Don't Know JS - \"Types & Grammar\"~~ `done`\n* You Don't Know JS - \"Async & Performance\"  `reading`\n* You Don't Know JS - \"ESc6 & Beyond\"\n* Learning JavaScript Design Patterns by Addy Osmani\n* ~~[intermezzOS](https://intermezzos.github.io/)~~  `done`\n\n2 - Finish these courses:\n* ~~[Git e Github na Vida Real](https://www.udemy.com/git-e-github-na-vida-real/)~~ `done`\n\n3- Do some extra activities like:\n* ~~Following MPJ's Youtube Channel - Funfunfunction~~  `doing`\n\nSome of these suggestions are from [Amy Simmon's gist](https://gist.github.com/amysimmons/1d3c6fa84800b50d6b515662b55d0cb9)\n\nThanks for reading ;)"
		},
		{
			"title": "Why I'm not a fan of React Native",
			"id": "why-im-not-a-fan-of-react-native",
			"tag": [
				"React Native"
			],
			"date": "2018-01-10",
			"content": "*Before I begin, I would like to stress the opinions below are about React Native and not about React.*\n\n**Spoiler alert: my experience wasn’t exactly positive.** And today I thought a lot about it to try to understand my discomfort using React Native.\n\nWhen I began my adventures with web development all I wanted was to make it work, and at the time jQuery was reigning with its amazing community that wrote lots and lots plugins, and that’s why I was able to finish a website with all its interactions and current trends, but I didn’t know how the magic worked.\n\nWhat if I needed some functionality and didn’t find the perfect plugin? This brought me discomfort. Not being able to say 100% sure if something was possible or not. Being dependant, not understanding the code that made all those plugins work. So there I went to learn Javascript for real.\n\nI always wanted to try mobile development. In 2016 I finally had my first experience using Ionic and Angular 2, I didn’t enjoy much of Angular in general, but I had no problems with Ionic. So why would I have it with React Native?\n\nIonic basically runs your code made of HTML/CSS/JavaScript inside a WebView with some native extensions, the so called hybrid. The development path was not different, the speed, difficulties and limitations were very similar to what I was used to in the web.\nBesides that, I only needed to write my code once and the app was ready to run both on Android and iOS.\n\nReact Native is a different story. We write using Javascript, but the code is rendered using native components and following the standards of the operating system. The promise of this is an experience for the user much closer to a native app.\nWriting the code only once? It’s not really like that, I had to split my code several times so the app could work in both systems.\n\nAbout development speed: I would like to ask for a moment of silent for mobile developers. About debugging the code without using Xcode and Android Studio: a minute of silence for me.\n\nI think React Native’s team does an amazing job, the framework is updated periodically and they are always working to be up to date with the system’s APIs. Besides that, for those that know how to write native code, it’s possible to use it inside React Native and not to be limited to the framework itself. \nIn my case I have to pray React Native’s team release the updates and that someone will remember to update the documentations aswell, what is not always the case.\n\nAnd here is the problem for me. My lack of previous experience with mobile development.\nThat’s why I cannot crucify the framework because of the limitations I have at the moment. Maybe it will be very interesting for a developer with this experience I don’t have, and for those who are fans of OOP, you have the possibility of using TypeScript and spare me the whining about Javascript :P\n\nIf I would develop an app using React Native again? In my free time, I don’t believe so. At least for now.\n\nIn other cases, I think it’s possible to make something useful with it if you’re not going to need functionalities that are heavy to performance like lots of animations and reproducing medias. \n\nBut before you decide to go this path, we can take a step back and ask ourselves if such application really needs to be an app, if having to download an app to have access to a content isn’t what is stopping an user to use your product, what in the end really matters the most.\n\nAbout alternatives to React Native, that’s another story and this post is already long enough. I will post about this in the future.\n\nDid you use React Native? How was your experience? Let me know in the comments below!\n\nSo long, and thanks for all the fish!\n"
		},
		{
			"title": "When to do requests in React Native",
			"id": "when-to-do-requests-in-react-native",
			"tag": [
				"React Native",
				"React"
			],
			"date": "2017-12-14",
			"content": "Did you ever encounter the error **Can only update a mounted or mounting component** while trying to code your new awesome app using React Native?\n\nThen you're probably trying to change something in the state before you should, for example calling `setState` inside a `componentWillMount` lifecycle.\n\nIf you need to fetch some data in your component, use `componentDidMount`.\n\nFor performance sake, take a look at `shouldComponentUpdate` to avoid making a new request everytime the component mounts again if the data is not something that changes constantly."
		},
		{
			"title": "How to use Disqus in Mavo",
			"id": "how-to-use-disqus-in-mavo",
			"tag": [
				"Mavo",
				"Disqus"
			],
			"date": "2017-11-21",
			"content": "If you don't know about [Mavo](https://mavo.io/), it mainly helps you turn your static HTML into reactive web applications without a single line of programming code and no server backend. The blog area of my website, for example, is made of Mavo's *magic*. \n\nNow let's talk about how to use Disqus inside Mavo so you can have a comment section in your blog as well!\n\nAs you can read in the tweet bellow, a plugin is on the way to make it super easy, until then you can follow the instructions in this post.\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"pt\"><p lang=\"en\" dir=\"ltr\">I&#39;m so excited you got <a href=\"https://twitter.com/disqus?ref_src=twsrc%5Etfw\">@disqus</a> working with Mavo! w00t!! I&#39;ve been wondering how to do it for a while!<br>I’ll make a plugin or something to make it easier so that people don&#39;t have to write any JS.</p>&mdash; Lea Verou (@LeaVerou) <a href=\"https://twitter.com/LeaVerou/status/932752118070546432?ref_src=twsrc%5Etfw\">20 de novembro de 2017</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n### Set up you Disqus\n\n1. Log into your Disqus account [here](https://disqus.com) and then click in \"Get Started\".\n\n2. Select \"I want to install Disqus on my site\" option.\n![disqus screenshot](https://raw.githubusercontent.com/laistomazz/laistomaz/master/content/2017/11/01.png)\n\n3. Fill in the fields with your website's data and then save by clicking on \"Create website\".\n\n4. Select a plan, you can use \"Basic\" to start with.\n\n5. In the \"What platform is your site on?\" step, scroll down and select \"Universal Code\" option.\n![disqus screenshot 2](https://raw.githubusercontent.com/laistomazz/laistomaz/master/content/2017/11/02.png)\n\n6. Copy the code inside box number 1.\n![disqus screenshot 3](https://raw.githubusercontent.com/laistomazz/laistomaz/master/content/2017/11/03.png)\n\n### Edit Disqus's code\n\n1 - Remove Javascript comments\n<?prettify?>\n```html\n<div id=\"disqus_thread\"></div>\n<script>\n\n/**\n*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\ns.src = 'https://wefwef.disqus.com/embed.js';\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();\n</script>\n<noscript>Please enable JavaScript to view the <a href=\"https://disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>\n```\n\nIt will look like this:\n\n```html\n<div id=\"disqus_thread\"></div>\n<script>\n\nvar disqus_config = function () {\nthis.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\ns.src = 'https://wefwef.disqus.com/embed.js';\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();\n</script>\n<noscript>Please enable JavaScript to view the <a href=\"https://disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>\n```\n\n2 - Replace **PAGE_URL** and **PAGE_IDENTIFIER**\n\n**PAGE_URL** will become `Mavo.Functions.url()`.\n\n**PAGE_IDENTIFIER** is a little bit more complicated. Here you need pass a value that differentiates one page from another.\n\nIf you look in the url of this page, you can see something like `?post=the-title-of-this-post`. This means I use `post` as the parameter to pass the `id` of my post. It's unique. So in my case:\n**PAGE_IDENTIFIER** will become `Mavo.Functions.url('post')`.\n\nNow let's use them in our code:\n\n```html\n<div id=\"disqus_thread\"></div>\n<script>\n\nvar disqus_config = function () {\nthis.page.url = Mavo.Functions.url();  // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = Mavo.Functions.url('post'); // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\ns.src = 'https://wefwef.disqus.com/embed.js';\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();\n</script>\n<noscript>Please enable JavaScript to view the <a href=\"https://disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>\n```\n\n3 - Finally paste it into your Mavo's code, where you want the comment section to show.\n\n***\n\nI hope this post was useful to you, if you have any questions or suggestions, please comment bellow.\n\nOnce Mavo's plugin for Disqus is available, I will edit this post and link it here.\n\nThanks for reading!"
		},
		{
			"id": "how-to-create-a-vuejs-component",
			"date": "2017-11-20",
			"tag": [
				"Vue.js"
			],
			"title": "How to create a Vue.js component",
			"content": "Soon!!"
		}
	]
}